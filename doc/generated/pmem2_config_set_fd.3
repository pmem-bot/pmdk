.\" Automatically generated by Pandoc 2.5
.\"
.TH "PMEM2_CONFIG_SET_FD" "3" "2020-01-15" "PMDK - pmem2 API version 1.0" "PMDK Programmer's Manual"
.hy
.\" Copyright 2019, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmem2_config_set_fd\f[R](), \f[B]pmem2_config_set_handle\f[R]() \-
stores a file descriptor in pmem2_config
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <libpmem2.h>

int pmem2_config_set_fd(struct pmem2_config *cfg, int fd);
int pmem2_config_set_handle(struct pmem2_config *cfg, HANDLE handle); /* Windows only */
\f[R]
.fi
.SH DESCRIPTION
.PP
On Linux the \f[B]pmem2_config_set_fd\f[R]() function validates and
stores a file descriptor in pmem2_config.
.PP
On Windows the \f[B]pmem2_config_set_fd\f[R]() function converts a file
descriptor to a file handle (using **_get_osfhandle\f[B]()), and passes
it to \f[R]pmem2_config_set_handle\f[B](). By default
\f[R]_get_osfhandle\f[B]() calls abort() in case of invalid file
descriptor, but this behavior can be suppressed by
\f[R]_set_abort_behavior\f[B]() and \f[R]SetErrorMode**() functions.
Please check MSDN documentation for more information about Windows CRT
error handling.
.PP
\f[I]fd\f[R] must be opened with \f[I]O_RDONLY\f[R] or \f[I]O_RDWR\f[R]
mode, but on Windows it is not validated.
.PP
If \f[I]fd\f[R] is negative, then file descriptor (or handle on Windows)
in *cfg is set to default, uninitialized value.
.PP
The \f[B]pmem2_config_set_handle\f[R]() function validates and stores a
file handle in pmem2_config.
If \f[I]handle\f[R] is INVALID_HANDLE_VALUE, file descriptor (or handle
on Windows) in *cfg is set to default, uninitialized value.
.SH RETURN VALUE
.PP
\f[B]pmem2_config_set_fd\f[R]() and \f[B]pmem2_config_set_handle\f[R]()
functions return 0 on success or one of the error values listed in the
next section.
.SH ERRORS
.PP
The \f[B]pmem2_config_set_fd\f[R]() function can return the following
errors:
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_HANDLE\f[R] \- \f[I]fd\f[R] is not an open
file descriptor.
On Windows the function can \f[B]abort\f[R]() on this failure based on
CRT\[cq]s abort() behavior.
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_HANDLE\f[R] \- \f[I]fd\f[R] is opened in
O_WRONLY mode.
.PP
On Linux:
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_TYPE\f[R] \- \f[I]fd\f[R] points to a
directory, block device, pipe, or socket.
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_TYPE\f[R] \- \f[I]fd\f[R] points to a
character device other than Device DAX.
.PP
On Windows:
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_TYPE\f[R] \- \f[I]handle\f[R] points to a
resource that is not a regular file.
.PP
On Windows \f[B]pmem2_config_set_fd\f[R]() can return all errors from
the underlying \f[B]pmem2_config_set_handle\f[R]() function.
.PP
The \f[B]pmem2_config_set_handle\f[R]() can return the following errors:
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_HANDLE\f[R] \- \f[I]handle\f[R] points to a
resource that is not a file.
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_TYPE\f[R] \- \f[I]handle\f[R] points to a
directory.
.SH SEE ALSO
.PP
\f[B]errno\f[R](3), \f[B]pmem2_map\f[R](3), \f[B]libpmem2\f[R](7) and
\f[B]<http://pmem.io>\f[R]
