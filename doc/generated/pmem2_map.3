.\" Automatically generated by Pandoc 2.5
.\"
.TH "PMEM2_MAP" "3" "2020-01-15" "PMDK - pmem2 API version 1.0" "PMDK Programmer's Manual"
.hy
.\" Copyright 2019, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmem2_map\f[R]() \- creates a mapping
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <libpmem2.h>

struct pmem2_config;
struct pmem2_map;
int pmem2_map(const struct pmem2_config *config, struct pmem2_map **map_ptr);
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmem2_map\f[R]() function creates a new mapping in the virtual
address space of the calling process.
This function requires that following arguments are set in the
\f[I]config\f[R] object:
.IP \[bu] 2
The source of the mapping, which may be either an opened file descriptor
or an opened handle to a file.
.RS 2
.IP \[bu] 2
The file descriptor has to be opened using \f[I]O_RDONLY\f[R] or
\f[I]O_RDWR\f[R] file access mode and passed via
\f[B]pmem2_config_set_fd\f[R](3).
Note on Windows the provided file descriptor is converted to a handle
using **_get_osfhandle\f[B](). For details please see the
\f[R]open\f[B](3), \f[R]pmem2_config_set_fd\f[B](3) and
\f[R]_get_osfhandle**() manual pages.
.IP \[bu] 2
Similarly, the handle has to be created with an access mode of
\f[I]GENERIC_READ\f[R] or \f[I](GENERIC_READ | GENERIC_WRITE)\f[R] and
passed via \f[B]pmem2_config_set_handle\f[R](3).
For details please see the \f[B]CreateFile\f[R]() and
\f[B]pmem2_config_set_handle\f[R](3) manual pages.
(Windows only)
.PP
The above functions are mutually exclusive, and only the last source set
prior to \f[B]pmem2_map\f[R]() is used.
.RE
.PP
If the \f[B]pmem2_map\f[R]() function succeeds in creating a new mapping
it instantiates a new *struct pmem2_map** object describing the mapping.
The pointer to this newly created object is stored in the user\-provided
variable passed via the \f[I]map_ptr\f[R] pointer.
If the mapping fails the variable pointed by \f[I]map_ptr\f[R] will
contain a NULL value and appropriate error value will be returned.
For a list of possible return values please see RETURN VALUE.
.PP
All \f[I]struct pmem2_map\f[R] objects created via the
\f[B]pmem2_map\f[R]() function have to be destroyed using the
\f[B]pmem2_unmap\f[R]() function.
For details please see \f[B]pmem2_unmap\f[R](3) manual page.
.SH RETURN VALUE
.PP
When \f[B]pmem2_map\f[R]() succeeds it returns 0.
Otherwise, it returns one of the following error values:
.IP \[bu] 2
\f[B]PMEM2_E_FILE_HANDLE_NOT_SET\f[R] \- config doesn\[cq]t contain a
file descriptor or file handle (Windows)
.IP \[bu] 2
\f[B]PMEM2_E_INVALID_FILE_HANDLE\f[R] \- invalid \f[I]file
descriptor\f[R] value in \f[I]config\f[R]
.IP \[bu] 2
\f[B]PMEM2_E_MAP_RANGE\f[R] \- \f[I]offset\f[R] + \f[I]length\f[R] is
too big to represent it using \f[I]size_t\f[R] data type
.IP \[bu] 2
\f[B]PMEM2_E_MAP_RANGE\f[R] \- end of the mapping (\f[I]offset\f[R] +
\f[I]length\f[R]) is outside of the file.
The file is too small.
.IP \[bu] 2
\f[B]PMEM2_E_MAPPING_EXISTS\f[R] \- if the object exists before the
function call.
For details please see \f[B]CreateFileMapping\f[R]() manual pages.
(Windows only)
.IP \[bu] 2
\f[B]PMEM2_E_OFFSET_UNALIGNED\f[R] \- argument unaligned, offset is not
a multiple of the alignment required for specific \f[I]*config\f[R].
Please see \f[B]pmem2_config_get_alignement\f[R](3).
.IP \[bu] 2
\f[B]PMEM2_E_LENGTH_UNALIGNED\f[R] \- argument unaligned, length is not
a multiple of the alignment required for specific \f[I]*config\f[R].
Please see \f[B]pmem2_config_get_alignement\f[R](3).
.PP
It can also return \f[B]\-EACCES\f[R], \f[B]\-EAGAIN\f[R],
\f[B]\-EBADF\f[R], \f[B]\-ENFILE\f[R], \f[B]\-ENODEV\f[R],
\f[B]\-ENOMEM\f[R], \f[B]\-EPERM\f[R], \f[B]\-ETXTBSY\f[R] from the
underlying \f[B]mmap\f[R](2) function.
It is used with and without \f[B]MAP_ANONYMOUS\f[R].
.PP
\f[B]\-EACCES\f[R] may be returned only if the file descriptor points to
an append\-only file.
.PP
It can also return all errors from the underlying
\f[B]pmem2_config_get_file_size\f[R]() function.
.SH SEE ALSO
.PP
\f[B]pmem2_unmap\f[R](3), \f[B]pmem2_config_set_fd\f[R](3),
\f[B]pmem2_config_get_file_size\f[R](3), \f[B]libpmem2\f[R](7),
\f[B]mmap\f[R](2), \f[B]open\f[R](3) and \f[B]<http://pmem.io>\f[R]
